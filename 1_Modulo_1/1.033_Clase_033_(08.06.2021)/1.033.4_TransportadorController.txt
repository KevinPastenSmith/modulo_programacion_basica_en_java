package controller;

import model.TransportadorModel;
import view.Mensajes;

public class TransportadorController {

	static Mensajes mensajes = new Mensajes();
	static TransportadorModel transportadorModel = new TransportadorModel();
	static MaterialController materialController = new MaterialController();
	
	//Metodos para definir atributos
	
		//1) Metodo para definir el diametro de la helice
		public float definirDiametroHelice(float tamañoParticula, String tipoMezcla) {
			
			transportadorModel.setTamañoParticula(tamañoParticula);
			
			if (tipoMezcla=="Homogénea") {
				transportadorModel.setDiametroHelice(12*tamañoParticula);
				System.out.println("Muy bien! segun los parametros que has ingresado y correspondiente a tu tipo de mezcla, el diametro aproximado recomendado para la helice de tu transportador es de: ");
				System.out.println(transportadorModel.getDiametroHelice()+"[mm]");
			}
			else if (tipoMezcla=="Heterogénea") {
				transportadorModel.setDiametroHelice(4*tamañoParticula);
				System.out.println("Muy bien! segun los parametros que has ingresado y correspondiente a tu tipo de mezcla, el diametro aproximado recomendado para la helice de tu transportador es de: ");
				System.out.println(transportadorModel.getDiametroHelice()+"[mm]");
			}
			else {
				mensajes.MensajeReintento();
			}
			
			return transportadorModel.getDiametroHelice();
			
		}
	
		//2) Metodo para definir el diametro nominal del tubo del transportador
		public double definirDiametroTubo(double diametroHelice) {
			
			transportadorModel.setDiametroHelicePulgadas(diametroHelice/25.4);
			System.out.println("El diametro de la helice en pulgadas es: "+transportadorModel.getDiametroHelicePulgadas());
			System.out.println("");
			
			
			if (transportadorModel.getDiametroHelicePulgadas()<10) {
				transportadorModel.setDiametroTubo(1.5);
			}
			else if (transportadorModel.getDiametroHelicePulgadas()>=10 && transportadorModel.getDiametroHelicePulgadas()<14) {
				transportadorModel.setDiametroTubo(2);
			}
			else if (transportadorModel.getDiametroHelicePulgadas()>=14 && transportadorModel.getDiametroHelicePulgadas()<=16){
				transportadorModel.setDiametroTubo(3);
			}
			else {
				System.out.println("Algo anda mal");
			}
			
			System.out.println("Y el diametro del tubo que necesitas para tu transportador es: "+transportadorModel.getDiametroTubo());
			
			return transportadorModel.getDiametroTubo();
		}
		
		//3) Metodo para definir el sentido de giro del transportador
		public String definirSentidoRotacionTransportador(String sentidoGiroMotor, String posicionMotor) {
			
			if (sentidoGiroMotor=="Horario") {
				if (posicionMotor=="Abajo") {
					transportadorModel.setSentidoRotacionTransportador("Anti-horario");
					System.out.println("Segun tu configuracion de motor lo ideal seria que el sentido de giro de tu transpordaor sea en direccion: "+transportadorModel.getSentidoRotacionTransportador());
				}
				else if (posicionMotor=="Arriba") {
					transportadorModel.setSentidoRotacionTransportador("Horario");
					System.out.println("Segun tu configuracion de motor lo ideal seria que el sentido de giro de tu transpordaor sea en direccion: "+transportadorModel.getSentidoRotacionTransportador());
				}
				else {
					System.out.println("Algo anda mal");
				}
			}
			if (sentidoGiroMotor=="Anti-horario") {
				
				if (posicionMotor=="Abajo") {
					transportadorModel.setSentidoRotacionTransportador("Horario");
					System.out.println("Segun tu configuracion de motor lo ideal seria que el sentido de giro de tu transpordaor sea en direccion: "+transportadorModel.getSentidoRotacionTransportador()+"()");
					
				}
				
				else if (posicionMotor=="Arriba") {
					transportadorModel.setSentidoRotacionTransportador("Anti-horario");
					System.out.println("Segun tu configuracion de motor lo ideal seria que el sentido de giro de tu transpordaor sea en direccion: "+transportadorModel.getSentidoRotacionTransportador()+"()");
				}
				else {
					System.out.println("Algo anda mal");
				}
			}
			else {
				System.out.println("Algo anda mal");
			}
			return transportadorModel.getSentidoRotacionTransportador();
		}
		
		
		//4) Metodo para definir el sentido de fabricacion de la helice
		public String definirSentidoFabricacionHelice(String sentidoRotacionTransportador) {
			
			if (sentidoRotacionTransportador=="Horario") {
				transportadorModel.setSentidohelice("Mano Izquierda");		
			}
			else if (sentidoRotacionTransportador=="Anti-horario") {
				transportadorModel.setSentidohelice("Mano Derecha");		
			}
			else {
				System.out.println("Algo anda mal");
			}
			return transportadorModel.getSentidohelice();
		
		}
		
		
		//5) y 6) Metodo para definir el tipo de helice y el paso
		
		public String definirTipoHelice(int opcionHelice) {
			 
			switch(opcionHelice) {
			
			case 1: transportadorModel.setTipoHelice("Helicoidal Sencillo, Paso Estándar");
					
			case 2: transportadorModel.setTipoHelice("Helicoidal Sencillo, Paso Corto");
			
			case 3: transportadorModel.setTipoHelice("Helicoidal Sencillo, Paso Medio");
			
			case 4: transportadorModel.setTipoHelice("Helicoidal con Corte, Paso Estándar");
			
			case 5: transportadorModel.setTipoHelice("Helicoidal de Listón, Paso Estandar");
			
			case 6: transportadorModel.setTipoHelice("Helicoidal con Paletas, Paso Estandar");
			
			default: mensajes.MensajeReintento();
			}

			return transportadorModel.getTipoHelice();
		}
		
		//6) Metodo para definir el paso de la helice
		
		public double definirPasoHelice(int opcionHelice) {
			
			switch(opcionHelice) {
			
			case 1: transportadorModel.setPaso(transportadorModel.getDiametroHelice());		
			case 2: transportadorModel.setTipoHelice("Helicoidal Sencillo, Paso Corto");
			case 3: transportadorModel.setTipoHelice("Helicoidal Sencillo, Paso Medio");
			case 4: transportadorModel.setTipoHelice("Helicoidal con Corte, Paso Estándar");
			case 5: transportadorModel.setTipoHelice("Helicoidal de Listón, Paso Estandar");
			case 6: transportadorModel.setTipoHelice("Helicoidal con Paletas, Paso Estandar");
			default: mensajes.MensajeReintento();
			}
			
			return transportadorModel.getPaso();
			
		}
			
		
		
		
		//7) Metodo para definir la velocidad de giro del transportador
		
		//8) Metodo para definir la velocidad de desplazamiento de material
		
		//9) Metodo para definir el area de relleno
		
		//10) Metodo para definir la capacidad del transportador
		
		
		
	//Metodos para obtener valores	

		//Metodo para obtener el tamaño de particula
		public float obtenerTamañoParticula() {
			return transportadorModel.getTamañoParticula();
		}
		
		public String obtenerTipoMezcla() {
			return materialController.obtenerTipoMezcla();
		}
}